vishal@vishal-VirtualBox:~$ cd ppl
vishal@vishal-VirtualBox:~/ppl$ gcc -gstabs assg3.c -o assg3
vishal@vishal-VirtualBox:~/ppl$ gdb assg3
GNU gdb (Ubuntu 9.1-0ubuntu1) 9.1
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from assg3...
(gdb) list
1	#include<stdio.h>
2	
3	int find_factorial(int);
4	
5	int main(){
6	   int num, fact;
7	   scanf("%d",&num);
8	   fact =find_factorial(num);
9	   printf("%d\n", fact);
10	   return 0;
(gdb) l
11	}
12	int find_factorial(int n){
13	  if(n==0)
14	      return(1);
15	   return(n*find_factorial(n-1));
16	}
17	
(gdb) b main
Breakpoint 1 at 0x1189: file assg3.c, line 5.
(gdb) disassemble main
Dump of assembler code for function main:
   0x0000000000001189 <+0>:	endbr64 
   0x000000000000118d <+4>:	push   %rbp
   0x000000000000118e <+5>:	mov    %rsp,%rbp
   0x0000000000001191 <+8>:	sub    $0x10,%rsp
   0x0000000000001195 <+12>:	mov    %fs:0x28,%rax
   0x000000000000119e <+21>:	mov    %rax,-0x8(%rbp)
   0x00000000000011a2 <+25>:	xor    %eax,%eax
   0x00000000000011a4 <+27>:	lea    -0x10(%rbp),%rax
   0x00000000000011a8 <+31>:	mov    %rax,%rsi
   0x00000000000011ab <+34>:	lea    0xe52(%rip),%rdi        # 0x2004
   0x00000000000011b2 <+41>:	mov    $0x0,%eax
   0x00000000000011b7 <+46>:	callq  0x1090 <__isoc99_scanf@plt>
   0x00000000000011bc <+51>:	mov    -0x10(%rbp),%eax
   0x00000000000011bf <+54>:	mov    %eax,%edi
   0x00000000000011c1 <+56>:	callq  0x11fa <find_factorial>
   0x00000000000011c6 <+61>:	mov    %eax,-0xc(%rbp)
   0x00000000000011c9 <+64>:	mov    -0xc(%rbp),%eax
   0x00000000000011cc <+67>:	mov    %eax,%esi
   0x00000000000011ce <+69>:	lea    0xe32(%rip),%rdi        # 0x2007
   0x00000000000011d5 <+76>:	mov    $0x0,%eax
   0x00000000000011da <+81>:	callq  0x1080 <printf@plt>
   0x00000000000011df <+86>:	mov    $0x0,%eax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x00000000000011e4 <+91>:	mov    -0x8(%rbp),%rdx
   0x00000000000011e8 <+95>:	xor    %fs:0x28,%rdx
   0x00000000000011f1 <+104>:	je     0x11f8 <main+111>
   0x00000000000011f3 <+106>:	callq  0x1070 <__stack_chk_fail@plt>
   0x00000000000011f8 <+111>:	leaveq 
   0x00000000000011f9 <+112>:	retq   
End of assembler dump.

