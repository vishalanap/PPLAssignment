#Assignment 1
SOLUTIONS TO PROBLEMS IN A1.c

Gimple
------

main ()
{
  int D.1713;
  int Z.0;
  int Z.1;
  int Z.2;
  int a;
  int b;
  int c;
  int p;
  int q;
  double r;

  p = 6;
  a = 10;
  b = 20;
  D.1713 = a * b;
  c = D.1713 + 25;
  p = 6;
  q = Z;
  r = 3.45e+1;
  Z.0 = (int) r;
  Z = Z.0;
  Z.1 = Z;
  Z.2 = Z.1 + 1;
  Z = Z.2;
}


Answers
-------

1.How  do the  declarations  look in  the  GIMPLE? Specifically,  what
 happens to multiple  variables declared and initialized  on the same
 line? What happens to global declaration [int Z]?

        

ANS==(i) in a gimple file there is a One declaration per line.
(ii)multiple variables declared in single line are splitted as a single declaration per line. 
(iii)The global declaration `int Z` has disappeared and is not explicitly declared,For using Z, its value must be stored from locals.

2 How are complex  expressions such as [c  = a * b +  25] broken down?
 Can you  determine a  rule as  to when  temporary variables  will be
 introduced?

          

ANS==(i)complex expressions such as are broken into single expression per line means One operation per line. 
(ii)Temporaries are introduced whenever an operation is used as an intermediate component of a computation.

3. How are  floats/doubles represented in  GIMPLE? What happens  when a
 float/double is assigned to an integer in [Z = r]?

 
ANS==(i) Floats and doubles are represented using scientific notation (for eg r in above problem)
(ii). when float assigned to int there is explicit cast insersion.

4. How  are reads/writes  to the  global variable  Z performed?  Why is
 there a temporary introduced  for the statement [Z = Z  + 1] but not
 for the statements [q = Z] or [Z = p]?

   

ANS== (i)Reads/writes to z performed through data stored in locals.
(ii) A temporary is required for Z = Z + 1 because the result of the computation Z + 1 cannot be written directly to a memory location.


Optional problem
----------------

Raw dump:

main ()
gimple_bind <
  int D.1713;
  int Z.0;
  int Z.1;
  int Z.2;
  int a;
  int b;
  int c;
  int p;
  int q;
  double r;

  gimple_assign <integer_cst, p, 6, NULL>
  gimple_assign <integer_cst, a, 10, NULL>
  gimple_assign <integer_cst, b, 20, NULL>
  gimple_assign <mult_expr, D.1713, a, b>
  gimple_assign <plus_expr, c, D.1713, 25>
  gimple_assign <integer_cst, p, 6, NULL>
  gimple_assign <var_decl, q, Z, NULL>
  gimple_assign <real_cst, r, 3.45e+1, NULL>
  gimple_assign <fix_trunc_expr, Z.0, r, NULL>
  gimple_assign <var_decl, Z, Z.0, NULL>
  gimple_assign <var_decl, Z.1, Z, NULL>
  gimple_assign <plus_expr, Z.2, Z.1, 1>
  gimple_assign <var_decl, Z, Z.2, NULL>
>

answer to the optional problem-
This looks like a dump of tree nodes - internally, there is a tree structure to gimple, though the dumps normally present it in a more human-readable form.