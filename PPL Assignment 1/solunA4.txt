#Assignment 1
SOLUTION TO PROBLEM A4.c
gimple
CFG
---

;; Function main (main, funcdef_no=0, decl_uid=1703, cgraph_uid=0)

main ()
{
  int * p;
  int i;
  int b[3];
  int a[3];
  int * D.1714;
  int D.1713;

<bb 2>:
  b[0] = 1;
  b[1] = 2;
  b[2] = 3;
  i = 0;
  goto <bb 4>;

<bb 3>:
  D.1713 = b[i];
  a[i] = D.1713;
  i = i + 1;

<bb 4>:
  if (i <= 2)
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 5>:
  p = &a;
  D.1714 = p + 8;
  *D.1714 = 5;
  a = {CLOBBER};
  b = {CLOBBER};
  return;

}


Answers

1.How is array declaration and initialization handled?



ANS==Declaration of array is done in single statement with no initialisation and explicit size.after entry of the each scope Initialisation takes place as one element per statement .

2.Why does the statement a[i] = b[i] get broken down to two steps with
 an intermediate temporary?

     



 

ANS== According to assumption as in many architectures only one operation per instruction is permitted.

3.Why are there CLOBBER statements at the end? 

ANS==To mark the arrays as invalid at scope exit -It is probably done to simplify analysis
   and permit reuse of stack slots, etc.