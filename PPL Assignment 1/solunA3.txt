#Assignment 1
SOLUTION TO PROBLEM A3.c
gimple
CFG
---

;; Function main (main, funcdef_no=0, decl_uid=1703, cgraph_uid=0)

main ()
{
  int j;
  int i;
  int sum;
  int D.1718;

<bb 2>:
  sum = 0;
  goto <bb 4>;

<bb 3>:
  sum = sum * 2;

<bb 4>:
  if (sum <= 99)
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 5>:
  i = 0;
  goto <bb 10>;

<bb 6>:
  j = 0;
  goto <bb 8>;

<bb 7>:
  D.1718 = i * j;
  sum = D.1718 + sum;
  j = j + 1;

<bb 8>:
  if (j <= 49)
    goto <bb 7>;
  else
    goto <bb 9>;

<bb 9>:
  i = i + 1;

<bb 10>:
  if (i <= 24)
    goto <bb 6>;
  else
    goto <bb 11>;

<bb 11>:
  return;

}


Answers=

1.Identify the basic blocks that correspond  to the while loop. How is
 the GIMPLE for a while loop different from simple if-else jumps?

 
Ans:(i) Here the basic blocks BB 3 and BB 4 correspond to the while loop. 
(ii) In the above question basic block BB2 avoids executing an iteration unconditionally and then it cause it to enter in basic block BB 4 which is the while loop conditional.In this way it is different from the if-else jumps, which always seems to be conditional.

2.  Identify the  basic blocks  for the nested  for-loop. You  should be
 able  to identify  intializers, conditions  and increments  for each
 loop as  well as  the shared  inner body.  Is there  really anything
 special about a for-loop as compared to a while-loop?



Ans:BB 5:  Outer loop induction variable initialisation
   BB 10: Outer loop conditional check
   BB 6:  Inner loop induction variable initialisation
   BB 8:  Inner loop conditional check
   BB 7:  Inner loop body + induction variable increment
   BB 9:  Outer loop induction variable increment